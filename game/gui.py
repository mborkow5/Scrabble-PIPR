from .ui_scrabble import Ui_MainWindow
from PySide2.QtWidgets import QMainWindow, QApplication, QPushButton
from PySide2.QtCore import QUrl
from .logic import Game
from .external_data import WordsFileNotFound
import os
from dotenv import load_dotenv, find_dotenv


load_dotenv(find_dotenv())
SECRET_KEY = os.environ.get("SECRET_KEY")
DATABASE_PASSWORD = os.environ.get("DATABASE_PASSWORD")


class ScrabbleWindow(QMainWindow):
    """
    ScrabbleWindow class is connected with generated by
    PySide-uic class QMainWindow(model made in Designer).
    It is connecting the model with logic (from class logic)
    and makes shure that no illegal move will be done.
    """

    def __init__(self, parent=None):
        super().__init__(parent)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.ui.NewGame.clicked.connect(self.new_game_button)
        self._toggled_tile = None
        self.ui.Pass.clicked.connect(self.pass_button)
        self.ui.Put.clicked.connect(self.put_button)
        self.ui.Exchange.setCheckable(True)
        self.ui.Exchange.clicked.connect(self.exchange)
        self.ui.About.clicked.connect(self.rules_game_switch)
        self.ui.Load.clicked.connect(self.load_button)
        self.ui.Save.clicked.connect(self.save_button)
        self.ui.comboBox.setEnabled(False)
        self.ui.Put.setEnabled(False)
        self.ui.Exchange.setEnabled(False)
        self.ui.Pass.setEnabled(False)
        self.ui.Save.setEnabled(False)
        self.ui.Load.setEnabled(os.path.isfile("config/save.json"))
        self.ui.your_turn.setWordWrap(True)
        self.ui.your_turn.setScaledContents(True)
        self._hand = []
        for i in range(1, 8):
            a = f"self.ui.tile_{i}"
            self._hand.append(eval(a))
        self.Save = QPushButton("Save")
        self.Load = QPushButton("Load")
        self.ui.tile_1.clicked.connect(lambda: self.tile_config(1))
        self.ui.tile_2.clicked.connect(lambda: self.tile_config(2))
        self.ui.tile_3.clicked.connect(lambda: self.tile_config(3))
        self.ui.tile_4.clicked.connect(lambda: self.tile_config(4))
        self.ui.tile_5.clicked.connect(lambda: self.tile_config(5))
        self.ui.tile_6.clicked.connect(lambda: self.tile_config(6))
        self.ui.tile_7.clicked.connect(lambda: self.tile_config(7))
        self.ui.Board1A.clicked.connect(lambda: self.board_config(1, "A"))
        self.ui.Board1B.clicked.connect(lambda: self.board_config(1, "B"))
        self.ui.Board1C.clicked.connect(lambda: self.board_config(1, "C"))
        self.ui.Board1D.clicked.connect(lambda: self.board_config(1, "D"))
        self.ui.Board1E.clicked.connect(lambda: self.board_config(1, "E"))
        self.ui.Board1F.clicked.connect(lambda: self.board_config(1, "F"))
        self.ui.Board1G.clicked.connect(lambda: self.board_config(1, "G"))
        self.ui.Board1H.clicked.connect(lambda: self.board_config(1, "H"))
        self.ui.Board1I.clicked.connect(lambda: self.board_config(1, "I"))
        self.ui.Board1J.clicked.connect(lambda: self.board_config(1, "J"))
        self.ui.Board1K.clicked.connect(lambda: self.board_config(1, "K"))
        self.ui.Board1L.clicked.connect(lambda: self.board_config(1, "L"))
        self.ui.Board1M.clicked.connect(lambda: self.board_config(1, "M"))
        self.ui.Board1N.clicked.connect(lambda: self.board_config(1, "N"))
        self.ui.Board1O.clicked.connect(lambda: self.board_config(1, "O"))
        self.ui.Board2A.clicked.connect(lambda: self.board_config(2, "A"))
        self.ui.Board2B.clicked.connect(lambda: self.board_config(2, "B"))
        self.ui.Board2C.clicked.connect(lambda: self.board_config(2, "C"))
        self.ui.Board2D.clicked.connect(lambda: self.board_config(2, "D"))
        self.ui.Board2E.clicked.connect(lambda: self.board_config(2, "E"))
        self.ui.Board2F.clicked.connect(lambda: self.board_config(2, "F"))
        self.ui.Board2G.clicked.connect(lambda: self.board_config(2, "G"))
        self.ui.Board2H.clicked.connect(lambda: self.board_config(2, "H"))
        self.ui.Board2I.clicked.connect(lambda: self.board_config(2, "I"))
        self.ui.Board2J.clicked.connect(lambda: self.board_config(2, "J"))
        self.ui.Board2K.clicked.connect(lambda: self.board_config(2, "K"))
        self.ui.Board2L.clicked.connect(lambda: self.board_config(2, "L"))
        self.ui.Board2M.clicked.connect(lambda: self.board_config(2, "M"))
        self.ui.Board2N.clicked.connect(lambda: self.board_config(2, "N"))
        self.ui.Board2O.clicked.connect(lambda: self.board_config(2, "O"))
        self.ui.Board3A.clicked.connect(lambda: self.board_config(3, "A"))
        self.ui.Board3B.clicked.connect(lambda: self.board_config(3, "B"))
        self.ui.Board3C.clicked.connect(lambda: self.board_config(3, "C"))
        self.ui.Board3D.clicked.connect(lambda: self.board_config(3, "D"))
        self.ui.Board3E.clicked.connect(lambda: self.board_config(3, "E"))
        self.ui.Board3F.clicked.connect(lambda: self.board_config(3, "F"))
        self.ui.Board3G.clicked.connect(lambda: self.board_config(3, "G"))
        self.ui.Board3H.clicked.connect(lambda: self.board_config(3, "H"))
        self.ui.Board3I.clicked.connect(lambda: self.board_config(3, "I"))
        self.ui.Board3J.clicked.connect(lambda: self.board_config(3, "J"))
        self.ui.Board3K.clicked.connect(lambda: self.board_config(3, "K"))
        self.ui.Board3L.clicked.connect(lambda: self.board_config(3, "L"))
        self.ui.Board3M.clicked.connect(lambda: self.board_config(3, "M"))
        self.ui.Board3N.clicked.connect(lambda: self.board_config(3, "N"))
        self.ui.Board3O.clicked.connect(lambda: self.board_config(3, "O"))
        self.ui.Board4A.clicked.connect(lambda: self.board_config(4, "A"))
        self.ui.Board4B.clicked.connect(lambda: self.board_config(4, "B"))
        self.ui.Board4C.clicked.connect(lambda: self.board_config(4, "C"))
        self.ui.Board4D.clicked.connect(lambda: self.board_config(4, "D"))
        self.ui.Board4E.clicked.connect(lambda: self.board_config(4, "E"))
        self.ui.Board4F.clicked.connect(lambda: self.board_config(4, "F"))
        self.ui.Board4G.clicked.connect(lambda: self.board_config(4, "G"))
        self.ui.Board4H.clicked.connect(lambda: self.board_config(4, "H"))
        self.ui.Board4I.clicked.connect(lambda: self.board_config(4, "I"))
        self.ui.Board4J.clicked.connect(lambda: self.board_config(4, "J"))
        self.ui.Board4K.clicked.connect(lambda: self.board_config(4, "K"))
        self.ui.Board4L.clicked.connect(lambda: self.board_config(4, "L"))
        self.ui.Board4M.clicked.connect(lambda: self.board_config(4, "M"))
        self.ui.Board4N.clicked.connect(lambda: self.board_config(4, "N"))
        self.ui.Board4O.clicked.connect(lambda: self.board_config(4, "O"))
        self.ui.Board5A.clicked.connect(lambda: self.board_config(5, "A"))
        self.ui.Board5B.clicked.connect(lambda: self.board_config(5, "B"))
        self.ui.Board5C.clicked.connect(lambda: self.board_config(5, "C"))
        self.ui.Board5D.clicked.connect(lambda: self.board_config(5, "D"))
        self.ui.Board5E.clicked.connect(lambda: self.board_config(5, "E"))
        self.ui.Board5F.clicked.connect(lambda: self.board_config(5, "F"))
        self.ui.Board5G.clicked.connect(lambda: self.board_config(5, "G"))
        self.ui.Board5H.clicked.connect(lambda: self.board_config(5, "H"))
        self.ui.Board5I.clicked.connect(lambda: self.board_config(5, "I"))
        self.ui.Board5J.clicked.connect(lambda: self.board_config(5, "J"))
        self.ui.Board5K.clicked.connect(lambda: self.board_config(5, "K"))
        self.ui.Board5L.clicked.connect(lambda: self.board_config(5, "L"))
        self.ui.Board5M.clicked.connect(lambda: self.board_config(5, "M"))
        self.ui.Board5N.clicked.connect(lambda: self.board_config(5, "N"))
        self.ui.Board5O.clicked.connect(lambda: self.board_config(5, "O"))
        self.ui.Board6A.clicked.connect(lambda: self.board_config(6, "A"))
        self.ui.Board6B.clicked.connect(lambda: self.board_config(6, "B"))
        self.ui.Board6C.clicked.connect(lambda: self.board_config(6, "C"))
        self.ui.Board6D.clicked.connect(lambda: self.board_config(6, "D"))
        self.ui.Board6E.clicked.connect(lambda: self.board_config(6, "E"))
        self.ui.Board6F.clicked.connect(lambda: self.board_config(6, "F"))
        self.ui.Board6G.clicked.connect(lambda: self.board_config(6, "G"))
        self.ui.Board6H.clicked.connect(lambda: self.board_config(6, "H"))
        self.ui.Board6I.clicked.connect(lambda: self.board_config(6, "I"))
        self.ui.Board6J.clicked.connect(lambda: self.board_config(6, "J"))
        self.ui.Board6K.clicked.connect(lambda: self.board_config(6, "K"))
        self.ui.Board6L.clicked.connect(lambda: self.board_config(6, "L"))
        self.ui.Board6M.clicked.connect(lambda: self.board_config(6, "M"))
        self.ui.Board6N.clicked.connect(lambda: self.board_config(6, "N"))
        self.ui.Board6O.clicked.connect(lambda: self.board_config(6, "O"))
        self.ui.Board7A.clicked.connect(lambda: self.board_config(7, "A"))
        self.ui.Board7B.clicked.connect(lambda: self.board_config(7, "B"))
        self.ui.Board7C.clicked.connect(lambda: self.board_config(7, "C"))
        self.ui.Board7D.clicked.connect(lambda: self.board_config(7, "D"))
        self.ui.Board7E.clicked.connect(lambda: self.board_config(7, "E"))
        self.ui.Board7F.clicked.connect(lambda: self.board_config(7, "F"))
        self.ui.Board7G.clicked.connect(lambda: self.board_config(7, "G"))
        self.ui.Board7H.clicked.connect(lambda: self.board_config(7, "H"))
        self.ui.Board7I.clicked.connect(lambda: self.board_config(7, "I"))
        self.ui.Board7J.clicked.connect(lambda: self.board_config(7, "J"))
        self.ui.Board7K.clicked.connect(lambda: self.board_config(7, "K"))
        self.ui.Board7L.clicked.connect(lambda: self.board_config(7, "L"))
        self.ui.Board7M.clicked.connect(lambda: self.board_config(7, "M"))
        self.ui.Board7N.clicked.connect(lambda: self.board_config(7, "N"))
        self.ui.Board7O.clicked.connect(lambda: self.board_config(7, "O"))
        self.ui.Board8A.clicked.connect(lambda: self.board_config(8, "A"))
        self.ui.Board8B.clicked.connect(lambda: self.board_config(8, "B"))
        self.ui.Board8C.clicked.connect(lambda: self.board_config(8, "C"))
        self.ui.Board8D.clicked.connect(lambda: self.board_config(8, "D"))
        self.ui.Board8E.clicked.connect(lambda: self.board_config(8, "E"))
        self.ui.Board8F.clicked.connect(lambda: self.board_config(8, "F"))
        self.ui.Board8G.clicked.connect(lambda: self.board_config(8, "G"))
        self.ui.Board8H.clicked.connect(lambda: self.board_config(8, "H"))
        self.ui.Board8I.clicked.connect(lambda: self.board_config(8, "I"))
        self.ui.Board8J.clicked.connect(lambda: self.board_config(8, "J"))
        self.ui.Board8K.clicked.connect(lambda: self.board_config(8, "K"))
        self.ui.Board8L.clicked.connect(lambda: self.board_config(8, "L"))
        self.ui.Board8M.clicked.connect(lambda: self.board_config(8, "M"))
        self.ui.Board8N.clicked.connect(lambda: self.board_config(8, "N"))
        self.ui.Board8O.clicked.connect(lambda: self.board_config(8, "O"))
        self.ui.Board9A.clicked.connect(lambda: self.board_config(9, "A"))
        self.ui.Board9B.clicked.connect(lambda: self.board_config(9, "B"))
        self.ui.Board9C.clicked.connect(lambda: self.board_config(9, "C"))
        self.ui.Board9D.clicked.connect(lambda: self.board_config(9, "D"))
        self.ui.Board9E.clicked.connect(lambda: self.board_config(9, "E"))
        self.ui.Board9F.clicked.connect(lambda: self.board_config(9, "F"))
        self.ui.Board9G.clicked.connect(lambda: self.board_config(9, "G"))
        self.ui.Board9H.clicked.connect(lambda: self.board_config(9, "H"))
        self.ui.Board9I.clicked.connect(lambda: self.board_config(9, "I"))
        self.ui.Board9J.clicked.connect(lambda: self.board_config(9, "J"))
        self.ui.Board9K.clicked.connect(lambda: self.board_config(9, "K"))
        self.ui.Board9L.clicked.connect(lambda: self.board_config(9, "L"))
        self.ui.Board9M.clicked.connect(lambda: self.board_config(9, "M"))
        self.ui.Board9N.clicked.connect(lambda: self.board_config(9, "N"))
        self.ui.Board9O.clicked.connect(lambda: self.board_config(9, "O"))
        self.ui.Board10A.clicked.connect(lambda: self.board_config(10, "A"))
        self.ui.Board10B.clicked.connect(lambda: self.board_config(10, "B"))
        self.ui.Board10C.clicked.connect(lambda: self.board_config(10, "C"))
        self.ui.Board10D.clicked.connect(lambda: self.board_config(10, "D"))
        self.ui.Board10E.clicked.connect(lambda: self.board_config(10, "E"))
        self.ui.Board10F.clicked.connect(lambda: self.board_config(10, "F"))
        self.ui.Board10G.clicked.connect(lambda: self.board_config(10, "G"))
        self.ui.Board10H.clicked.connect(lambda: self.board_config(10, "H"))
        self.ui.Board10I.clicked.connect(lambda: self.board_config(10, "I"))
        self.ui.Board10J.clicked.connect(lambda: self.board_config(10, "J"))
        self.ui.Board10K.clicked.connect(lambda: self.board_config(10, "K"))
        self.ui.Board10L.clicked.connect(lambda: self.board_config(10, "L"))
        self.ui.Board10M.clicked.connect(lambda: self.board_config(10, "M"))
        self.ui.Board10N.clicked.connect(lambda: self.board_config(10, "N"))
        self.ui.Board10O.clicked.connect(lambda: self.board_config(10, "O"))
        self.ui.Board11A.clicked.connect(lambda: self.board_config(11, "A"))
        self.ui.Board11B.clicked.connect(lambda: self.board_config(11, "B"))
        self.ui.Board11C.clicked.connect(lambda: self.board_config(11, "C"))
        self.ui.Board11D.clicked.connect(lambda: self.board_config(11, "D"))
        self.ui.Board11E.clicked.connect(lambda: self.board_config(11, "E"))
        self.ui.Board11F.clicked.connect(lambda: self.board_config(11, "F"))
        self.ui.Board11G.clicked.connect(lambda: self.board_config(11, "G"))
        self.ui.Board11H.clicked.connect(lambda: self.board_config(11, "H"))
        self.ui.Board11I.clicked.connect(lambda: self.board_config(11, "I"))
        self.ui.Board11J.clicked.connect(lambda: self.board_config(11, "J"))
        self.ui.Board11K.clicked.connect(lambda: self.board_config(11, "K"))
        self.ui.Board11L.clicked.connect(lambda: self.board_config(11, "L"))
        self.ui.Board11M.clicked.connect(lambda: self.board_config(11, "M"))
        self.ui.Board11N.clicked.connect(lambda: self.board_config(11, "N"))
        self.ui.Board11O.clicked.connect(lambda: self.board_config(11, "O"))
        self.ui.Board12A.clicked.connect(lambda: self.board_config(12, "A"))
        self.ui.Board12B.clicked.connect(lambda: self.board_config(12, "B"))
        self.ui.Board12C.clicked.connect(lambda: self.board_config(12, "C"))
        self.ui.Board12D.clicked.connect(lambda: self.board_config(12, "D"))
        self.ui.Board12E.clicked.connect(lambda: self.board_config(12, "E"))
        self.ui.Board12F.clicked.connect(lambda: self.board_config(12, "F"))
        self.ui.Board12G.clicked.connect(lambda: self.board_config(12, "G"))
        self.ui.Board12H.clicked.connect(lambda: self.board_config(12, "H"))
        self.ui.Board12I.clicked.connect(lambda: self.board_config(12, "I"))
        self.ui.Board12J.clicked.connect(lambda: self.board_config(12, "J"))
        self.ui.Board12K.clicked.connect(lambda: self.board_config(12, "K"))
        self.ui.Board12L.clicked.connect(lambda: self.board_config(12, "L"))
        self.ui.Board12M.clicked.connect(lambda: self.board_config(12, "M"))
        self.ui.Board12N.clicked.connect(lambda: self.board_config(12, "N"))
        self.ui.Board12O.clicked.connect(lambda: self.board_config(12, "O"))
        self.ui.Board13A.clicked.connect(lambda: self.board_config(13, "A"))
        self.ui.Board13B.clicked.connect(lambda: self.board_config(13, "B"))
        self.ui.Board13C.clicked.connect(lambda: self.board_config(13, "C"))
        self.ui.Board13D.clicked.connect(lambda: self.board_config(13, "D"))
        self.ui.Board13E.clicked.connect(lambda: self.board_config(13, "E"))
        self.ui.Board13F.clicked.connect(lambda: self.board_config(13, "F"))
        self.ui.Board13G.clicked.connect(lambda: self.board_config(13, "G"))
        self.ui.Board13H.clicked.connect(lambda: self.board_config(13, "H"))
        self.ui.Board13I.clicked.connect(lambda: self.board_config(13, "I"))
        self.ui.Board13J.clicked.connect(lambda: self.board_config(13, "J"))
        self.ui.Board13K.clicked.connect(lambda: self.board_config(13, "K"))
        self.ui.Board13L.clicked.connect(lambda: self.board_config(13, "L"))
        self.ui.Board13M.clicked.connect(lambda: self.board_config(13, "M"))
        self.ui.Board13N.clicked.connect(lambda: self.board_config(13, "N"))
        self.ui.Board13O.clicked.connect(lambda: self.board_config(13, "O"))
        self.ui.Board14A.clicked.connect(lambda: self.board_config(14, "A"))
        self.ui.Board14B.clicked.connect(lambda: self.board_config(14, "B"))
        self.ui.Board14C.clicked.connect(lambda: self.board_config(14, "C"))
        self.ui.Board14D.clicked.connect(lambda: self.board_config(14, "D"))
        self.ui.Board14E.clicked.connect(lambda: self.board_config(14, "E"))
        self.ui.Board14F.clicked.connect(lambda: self.board_config(14, "F"))
        self.ui.Board14G.clicked.connect(lambda: self.board_config(14, "G"))
        self.ui.Board14H.clicked.connect(lambda: self.board_config(14, "H"))
        self.ui.Board14I.clicked.connect(lambda: self.board_config(14, "I"))
        self.ui.Board14J.clicked.connect(lambda: self.board_config(14, "J"))
        self.ui.Board14K.clicked.connect(lambda: self.board_config(14, "K"))
        self.ui.Board14L.clicked.connect(lambda: self.board_config(14, "L"))
        self.ui.Board14M.clicked.connect(lambda: self.board_config(14, "M"))
        self.ui.Board14N.clicked.connect(lambda: self.board_config(14, "N"))
        self.ui.Board14O.clicked.connect(lambda: self.board_config(14, "O"))
        self.ui.Board15A.clicked.connect(lambda: self.board_config(15, "A"))
        self.ui.Board15B.clicked.connect(lambda: self.board_config(15, "B"))
        self.ui.Board15C.clicked.connect(lambda: self.board_config(15, "C"))
        self.ui.Board15D.clicked.connect(lambda: self.board_config(15, "D"))
        self.ui.Board15E.clicked.connect(lambda: self.board_config(15, "E"))
        self.ui.Board15F.clicked.connect(lambda: self.board_config(15, "F"))
        self.ui.Board15G.clicked.connect(lambda: self.board_config(15, "G"))
        self.ui.Board15H.clicked.connect(lambda: self.board_config(15, "H"))
        self.ui.Board15I.clicked.connect(lambda: self.board_config(15, "I"))
        self.ui.Board15J.clicked.connect(lambda: self.board_config(15, "J"))
        self.ui.Board15K.clicked.connect(lambda: self.board_config(15, "K"))
        self.ui.Board15L.clicked.connect(lambda: self.board_config(15, "L"))
        self.ui.Board15M.clicked.connect(lambda: self.board_config(15, "M"))
        self.ui.Board15N.clicked.connect(lambda: self.board_config(15, "N"))
        self.ui.Board15O.clicked.connect(lambda: self.board_config(15, "O"))
        self.empty_board_palette = self.ui.Board15O.palette()
        self.tile_palette = self.ui.tile_1.palette()
        self.empty_tile_and_centre_palette = self.ui.Board8H.palette()
        self._g = None

    def save_button(self):
        self._g.save()
        self.ui.Load.setEnabled(True)

    def load_button(self):
        self.new_game_button()
        self.restart_board()
        self.restart_hand()
        try:
            self._g.load()
            self.sync_hand_to_GUI()
            self.sync_scoreboard_to_GUI()
            for tiles in self._g.accepted_tiles:
                slot = f'self.ui.Board{tiles[0]+1}{chr(tiles[1]+ord("A"))}'
                eval(slot).setText(self._g.board[tiles[0]][tiles[1]])
                eval(slot).setPalette(self.tile_palette)
        except FileNotFoundError:
            self.new_game_button()
            self.save_button()

    def clear_board_changes(self):
        for place in self._g.new_on_board:
            slot = f'self.ui.Board{place[0]+1}{chr(place[1]+ord("A"))}'
            for tile_slot in self._hand:
                if tile_slot.text() == "":
                    tile_slot.setText(eval(slot).text())
                    tile_slot.setPalette(self.tile_palette)
                    break
            eval(slot).setText("")
            self.empty(eval(slot))
        self.sync_hand_to_logic()
        self.sync_board_to_logic()
        self._g.clear_new_on_board()

    def restart_board(self):
        for i in range(15):
            for j in range(15):
                slot = f'self.ui.Board{i+1}{chr(ord("A")+j)}'
                eval(slot).setChecked(False)
                eval(slot).setText("")
                self.empty(eval(slot))
        self._g.clear_new_on_board()

    def restart_hand(self):
        for i in range(7):
            tile = f"self.ui.tile_{i+1}"
            eval(tile).setText("")
            eval(tile).setChecked(False)
            eval(tile).setPalette(self.tile_palette)
        self._toggled_tile = None

    def rules_game_switch(self):
        current = self.ui.stackedWidget_2.currentIndex()
        self.ui.stackedWidget_2.setCurrentIndex((current + 1) % 2)
        self.ui.webView.load(QUrl("http://www.pfs.org.pl/reguly.php"))

    def finishing(self):
        self.ui.Save.setEnabled(False)
        self.sync_scoreboard_to_GUI()
        self.ui.scoreboard.setText("FINAL RESULTS:\n" + self.ui.scoreboard.text())
        self.ui.Pass.setEnabled(False)
        self.ui.Exchange.setEnabled(False)
        del self._g
        self._g = None

    def pass_button(self):
        self._g.passed()
        self.clear_board_changes()
        self.pass_the_turn()

    def pass_the_turn(self):
        for accepted_tile in self._g.new_on_board:
            slot = f'self.ui.Board{accepted_tile[0]+1}{chr(ord("A")+accepted_tile[1])}'
            eval(slot).setCheckable(False)
        if self._g.end_of_the_game():
            self.finishing()
        else:
            self._toggled_tile = None
            try:
                self._g.next_turn()
                a = self._g.bots_decision()
                if a:
                    self.finishing()
                else:
                    self.sync_hand_to_GUI()
                    if self.ui.scoreboard.text() != "THERE IS NO WORDS.TXT FILE":
                        self.sync_scoreboard_to_GUI()
                    self.ui.Put.setEnabled(False)
                    for tiles in self._g.accepted_tiles:
                        slot = f'self.ui.Board{tiles[0]+1}{chr(tiles[1]+ord("A"))}'
                        eval(slot).setText(self._g.board[tiles[0]][tiles[1]])
                        eval(slot).setPalette(self.tile_palette)
            except WordsFileNotFound:
                self.turn_off()
                self.ui.scoreboard.setText("THERE IS NO WORDS.TXT FILE")

    def tile_config(self, i):
        if self._g:
            if self.ui.comboBox.isEnabled():
                if len(self.ui.comboBox.currentText()) == 1:
                    self._toggled_tile.setText(self.ui.comboBox.currentText())
                else:
                    self._toggled_tile.setText(" ")
            self.ui.comboBox.setEnabled(False)
            tile = f"self.ui.tile_{i}"
            if not self.ui.Exchange.isChecked():

                if self._toggled_tile is None:
                    if eval(tile).text() != "":
                        self._toggled_tile = eval(tile)
                        if len(eval(tile).text()) == 1:
                            self.ui.comboBox.setEnabled(True)
                    else:
                        eval(tile).toggle()
                else:
                    if eval(tile).text() == "":
                        self.empty(self._toggled_tile)
                        eval(tile).setPalette(self.tile_palette)
                    eval(tile).setCheckable(True)
                    a = self._toggled_tile.text()
                    self._toggled_tile.setText(eval(tile).text())
                    eval(tile).setText(a)
                    self._toggled_tile.toggle()
                    eval(tile).toggle()
                    self._toggled_tile = None
                    self.sync_board_to_logic()
                    self.ui.Put.setEnabled(self._g.is_move_legal())
            else:
                if eval(tile).isChecked():
                    self._to_exchange.append(i - 1)
                    self.ui.Exchange.setEnabled(
                        len(self._to_exchange) <= len(self._g.tile_bag)
                    )
                else:
                    self._to_exchange.remove(i - 1)
                    self.ui.Exchange.setEnabled(
                        len(self._to_exchange) <= len(self._g.tile_bag)
                    )

    def board_config(self, x, y):
        if (
            self._g
            and self._g.whoese_turn == 0
            and (x - 1, ord(y) - ord("A")) not in self._g.accepted_tiles
        ):
            if self.ui.comboBox.isEnabled():
                if len(self.ui.comboBox.currentText()) == 1:
                    self._toggled_tile.setText(self.ui.comboBox.currentText())
                else:
                    self._toggled_tile.setText(" ")
            self.ui.comboBox.setEnabled(False)
            if self._g.whoese_turn == 0:
                slot = f"self.ui.Board{x}{y}"
                if self._toggled_tile is None:
                    if eval(slot).text() != "":
                        self._toggled_tile = eval(slot)
                        if len(eval(slot).text()) == 1:
                            self.ui.comboBox.setEnabled(True)
                elif self._toggled_tile.text() == "":
                    if eval(slot).text() != "":
                        self._toggled_tile.toggle()
                        eval(slot).toggle()
                        self._toggled_tile = None
                    self.sync_board_to_logic()
                    self.ui.Put.setEnabled(self._g.is_move_legal())
                else:
                    if eval(slot).text() == "":
                        self.empty(self._toggled_tile)
                        eval(slot).setCheckable(True)
                        eval(slot).setPalette(self.tile_palette)
                    else:
                        eval(slot).toggle()
                    a = self._toggled_tile.text()
                    self._toggled_tile.setText(eval(slot).text())
                    eval(slot).setText(a)
                    self._toggled_tile.toggle()
                    self._toggled_tile = None
                    self._g.append_new_on_board((x - 1, ord(y) - ord("A")))
                    self.sync_board_to_logic()
                    self.ui.Put.setEnabled(self._g.is_move_legal())

    def empty(self, button):
        if button in self._hand:
            button.setPalette(self.empty_tile_and_centre_palette)
        elif button == self.ui.Board8H:
            button.setCheckable(False)
            button.setPalette(self.empty_tile_and_centre_palette)

        else:
            button.setCheckable(False)
            button.setPalette(self.empty_board_palette)

    def sync_board_to_logic(self):
        for i in range(15):
            for j in range(15):
                slot = f'self.ui.Board{i+1}{chr(ord("A")+j)}'
                self._g.set_board((i, j), eval(slot).text())
                if (i, j) in self._g.new_on_board and self._g.board[i][j] == "":
                    self._g.remove_new_on_board((i, j))

    def sync_hand_to_logic(self):
        for tile_slot in enumerate(self._hand):
            self._g.set_hand(tile_slot[0], tile_slot[1].text())

    def sync_hand_to_GUI(self):
        for tile_slot in enumerate(self._hand):
            tile_slot[1].setText(self._g.hand[tile_slot[0]])
            tile_slot[1].setChecked(False)
            if tile_slot[1].text() != "":
                tile_slot[1].setPalette(self.tile_palette)
            else:
                self.empty(tile_slot[1])

    def sync_scoreboard_to_GUI(self):
        self.ui.scoreboard.setText(self._g.scoreboard())
        self.ui.your_turn.setText(f"New created words: {self._g._new_created_words}")

    def print_hand(self):
        for i in range(7):
            tile = f"self.ui.tile_{i+1}"
            eval(tile).setText(self._g.hand[i])

    def exchange(self):
        if self.ui.Exchange.isChecked():
            self.clear_board_changes()
            self.ui.Pass.setEnabled(False)
            self._to_exchange = []
            self.sync_hand_to_logic()
            for tile in self._hand:
                tile.setChecked(False)
        else:

            if self._to_exchange != []:
                for tile in self._hand:
                    tile.setChecked(False)
                self._g.swap(self._to_exchange)
                self.sync_hand_to_GUI()
                self.pass_the_turn()
            self.ui.Pass.setEnabled(True)

    def put_button(self):
        self.sync_hand_to_logic()
        self._g.tiles_to_words()
        self.challange_button()

    def challange_button(self):
        try:
            self._g.creating_new_words(True)
            if self.ui.scoreboard.text() == self._g.scoreboard():
                self.clear_board_changes()
            self.sync_scoreboard_to_GUI()
            self.pass_the_turn()
        except WordsFileNotFound:
            self.turn_off()
            self.ui.scoreboard.setText("THERE IS NO WORDS.TXT FILE")

    def turn_off(self):
        self.ui.comboBox.setEnabled(False)
        self.ui.Put.setEnabled(False)
        self.ui.Exchange.setEnabled(False)
        self.ui.Pass.setEnabled(False)
        self.ui.Save.setEnabled(False)
        self.ui.Load.setEnabled(False)
        self.ui.NewGame.setEnabled(False)

    def new_game_button(self):
        try:
            del self._g
            self.restart_board()
            self.restart_hand()
        except AttributeError:
            pass
        self._g = Game()
        self.ui.Save.setEnabled(True)
        self.sync_hand_to_GUI()
        self.sync_scoreboard_to_GUI()
        self.ui.Put.setEnabled(False)
        self.ui.Exchange.setEnabled(True)
        self.ui.Pass.setEnabled(True)
        self.ui.Exchange.setChecked(False)


def guiMain():
    app = QApplication()
    window = ScrabbleWindow()
    window.show()
    return app.exec_()
